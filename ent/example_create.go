// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atiinc/entgo-sqlite/ent/example"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExampleCreate is the builder for creating a Example entity.
type ExampleCreate struct {
	config
	mutation *ExampleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "CreatedAt" field.
func (ec *ExampleCreate) SetCreatedAt(t time.Time) *ExampleCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (ec *ExampleCreate) SetNillableCreatedAt(t *time.Time) *ExampleCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetExampleString sets the "ExampleString" field.
func (ec *ExampleCreate) SetExampleString(s string) *ExampleCreate {
	ec.mutation.SetExampleString(s)
	return ec
}

// SetExampleJSON sets the "ExampleJSON" field.
func (ec *ExampleCreate) SetExampleJSON(m map[string]interface{}) *ExampleCreate {
	ec.mutation.SetExampleJSON(m)
	return ec
}

// SetID sets the "id" field.
func (ec *ExampleCreate) SetID(u uuid.UUID) *ExampleCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *ExampleCreate) SetNillableID(u *uuid.UUID) *ExampleCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// Mutation returns the ExampleMutation object of the builder.
func (ec *ExampleCreate) Mutation() *ExampleMutation {
	return ec.mutation
}

// Save creates the Example in the database.
func (ec *ExampleCreate) Save(ctx context.Context) (*Example, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExampleCreate) SaveX(ctx context.Context) *Example {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExampleCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExampleCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExampleCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := example.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := example.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExampleCreate) check() error {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`ent: missing required field "Example.CreatedAt"`)}
	}
	if _, ok := ec.mutation.ExampleString(); !ok {
		return &ValidationError{Name: "ExampleString", err: errors.New(`ent: missing required field "Example.ExampleString"`)}
	}
	if _, ok := ec.mutation.ExampleJSON(); !ok {
		return &ValidationError{Name: "ExampleJSON", err: errors.New(`ent: missing required field "Example.ExampleJSON"`)}
	}
	return nil
}

func (ec *ExampleCreate) sqlSave(ctx context.Context) (*Example, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExampleCreate) createSpec() (*Example, *sqlgraph.CreateSpec) {
	var (
		_node = &Example{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(example.Table, sqlgraph.NewFieldSpec(example.FieldID, field.TypeUUID))
	)
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(example.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.ExampleString(); ok {
		_spec.SetField(example.FieldExampleString, field.TypeString, value)
		_node.ExampleString = value
	}
	if value, ok := ec.mutation.ExampleJSON(); ok {
		_spec.SetField(example.FieldExampleJSON, field.TypeJSON, value)
		_node.ExampleJSON = value
	}
	return _node, _spec
}

// ExampleCreateBulk is the builder for creating many Example entities in bulk.
type ExampleCreateBulk struct {
	config
	err      error
	builders []*ExampleCreate
}

// Save creates the Example entities in the database.
func (ecb *ExampleCreateBulk) Save(ctx context.Context) ([]*Example, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Example, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExampleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExampleCreateBulk) SaveX(ctx context.Context) []*Example {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExampleCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExampleCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
