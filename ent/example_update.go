// Code generated by ent, DO NOT EDIT.

package ent

import (
	"atiinc/entgo-sqlite/ent/example"
	"atiinc/entgo-sqlite/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExampleUpdate is the builder for updating Example entities.
type ExampleUpdate struct {
	config
	hooks    []Hook
	mutation *ExampleMutation
}

// Where appends a list predicates to the ExampleUpdate builder.
func (eu *ExampleUpdate) Where(ps ...predicate.Example) *ExampleUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCreatedAt sets the "CreatedAt" field.
func (eu *ExampleUpdate) SetCreatedAt(t time.Time) *ExampleUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableCreatedAt(t *time.Time) *ExampleUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetExampleString sets the "ExampleString" field.
func (eu *ExampleUpdate) SetExampleString(s string) *ExampleUpdate {
	eu.mutation.SetExampleString(s)
	return eu
}

// SetNillableExampleString sets the "ExampleString" field if the given value is not nil.
func (eu *ExampleUpdate) SetNillableExampleString(s *string) *ExampleUpdate {
	if s != nil {
		eu.SetExampleString(*s)
	}
	return eu
}

// SetExampleJSON sets the "ExampleJSON" field.
func (eu *ExampleUpdate) SetExampleJSON(m map[string]interface{}) *ExampleUpdate {
	eu.mutation.SetExampleJSON(m)
	return eu
}

// Mutation returns the ExampleMutation object of the builder.
func (eu *ExampleUpdate) Mutation() *ExampleMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExampleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExampleUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExampleUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExampleUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *ExampleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(example.Table, example.Columns, sqlgraph.NewFieldSpec(example.FieldID, field.TypeUUID))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.SetField(example.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eu.mutation.ExampleString(); ok {
		_spec.SetField(example.FieldExampleString, field.TypeString, value)
	}
	if value, ok := eu.mutation.ExampleJSON(); ok {
		_spec.SetField(example.FieldExampleJSON, field.TypeJSON, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExampleUpdateOne is the builder for updating a single Example entity.
type ExampleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExampleMutation
}

// SetCreatedAt sets the "CreatedAt" field.
func (euo *ExampleUpdateOne) SetCreatedAt(t time.Time) *ExampleUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableCreatedAt(t *time.Time) *ExampleUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetExampleString sets the "ExampleString" field.
func (euo *ExampleUpdateOne) SetExampleString(s string) *ExampleUpdateOne {
	euo.mutation.SetExampleString(s)
	return euo
}

// SetNillableExampleString sets the "ExampleString" field if the given value is not nil.
func (euo *ExampleUpdateOne) SetNillableExampleString(s *string) *ExampleUpdateOne {
	if s != nil {
		euo.SetExampleString(*s)
	}
	return euo
}

// SetExampleJSON sets the "ExampleJSON" field.
func (euo *ExampleUpdateOne) SetExampleJSON(m map[string]interface{}) *ExampleUpdateOne {
	euo.mutation.SetExampleJSON(m)
	return euo
}

// Mutation returns the ExampleMutation object of the builder.
func (euo *ExampleUpdateOne) Mutation() *ExampleMutation {
	return euo.mutation
}

// Where appends a list predicates to the ExampleUpdate builder.
func (euo *ExampleUpdateOne) Where(ps ...predicate.Example) *ExampleUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExampleUpdateOne) Select(field string, fields ...string) *ExampleUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Example entity.
func (euo *ExampleUpdateOne) Save(ctx context.Context) (*Example, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExampleUpdateOne) SaveX(ctx context.Context) *Example {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExampleUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExampleUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *ExampleUpdateOne) sqlSave(ctx context.Context) (_node *Example, err error) {
	_spec := sqlgraph.NewUpdateSpec(example.Table, example.Columns, sqlgraph.NewFieldSpec(example.FieldID, field.TypeUUID))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Example.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, example.FieldID)
		for _, f := range fields {
			if !example.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != example.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.SetField(example.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euo.mutation.ExampleString(); ok {
		_spec.SetField(example.FieldExampleString, field.TypeString, value)
	}
	if value, ok := euo.mutation.ExampleJSON(); ok {
		_spec.SetField(example.FieldExampleJSON, field.TypeJSON, value)
	}
	_node = &Example{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{example.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
